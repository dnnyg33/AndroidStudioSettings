<templateSet group="Flutter">
  <template name="stanim" value="class $NAME$ extends StatefulWidget {&#10;  @override&#10;  _$NAME$State createState() =&gt; _$NAME$State();&#10;}&#10;&#10;class _$NAME$State extends State&lt;$NAME$&gt; with SingleTickerProviderStateMixin {&#10;  AnimationController _controller;&#10;&#10;  @override&#10;  void initState() {&#10;    _controller = AnimationController(vsync: this);&#10;    super.initState();&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _controller.dispose();&#10;    super.dispose();&#10;  }&#10;  &#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container($END$);&#10;  }&#10;}&#10;" description="New Stateful widget with AnimationController" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="pageWithBloc" value="import 'package:flutter_bloc/flutter_bloc.dart';&#10;import 'package:firebase_analytics/firebase_analytics.dart';&#10;import 'package:firebase_analytics/observer.dart';&#10;import 'package:firebase_database/firebase_database.dart';&#10;import 'package:flutter/material.dart';&#10;&#10;void routeTo$PAGE_NAME$Page(BuildContext context) {&#10;  Navigator.push(&#10;    context,&#10;    MaterialPageRoute(builder: (context) {&#10;      FirebaseAnalytics analytics = FirebaseAnalytics.instance;&#10;      FirebaseAnalyticsObserver observer =&#10;      FirebaseAnalyticsObserver(analytics: analytics);&#10;      return $PAGE_NAME$Page(analytics, observer);&#10;    }),&#10;  );&#10;}&#10;&#10;class $PAGE_NAME$Page extends StatelessWidget {&#10;  const $PAGE_NAME$Page(this.analytics, this.observer, {super.key});&#10;  final FirebaseAnalytics analytics;&#10;  final FirebaseAnalyticsObserver observer;&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return BlocProvider(&#10;        create: (_) =&gt; $PAGE_NAME$Bloc(&#10;            repository: context.read())&#10;          ..add(PageLoad()),&#10;        child: _$PAGE_NAME$Page());&#10;  }&#10;}&#10;&#10;class _$PAGE_NAME$Page extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return BlocListener&lt;$PAGE_NAME$Bloc, $PAGE_NAME$PageState&gt;(&#10;        listener: (context, state) {&#10;        state.maybeMap(orElse: () {});&#10;        }, child: BlocBuilder&lt;$PAGE_NAME$Bloc, $PAGE_NAME$PageState&gt;(&#10;        builder: (context, $PAGE_NAME$PageState state) {&#10;          return Scaffold(&#10;              appBar: AppBar(&#10;                title: const Text(&quot;$PAGE_NAME$&quot;),&#10;              ),&#10;              floatingActionButton: buildFab(state),&#10;              body: buildBody(state));&#10;        }));&#10;  }&#10;  &#10;  buildBody($PAGE_NAME$PageState state) {&#10;    return state.maybeMap(&#10;        initial: (value) {&#10;        },&#10;        orElse: () {&#10;        }&#10;    );&#10;   }&#10;}&#10;&#10;abstract class $PAGE_NAME$Event {}&#10;&#10;class PageLoad extends $PAGE_NAME$Event {}&#10;&#10;class $PAGE_NAME$Bloc extends Bloc&lt;$PAGE_NAME$Event, $PAGE_NAME$PageState&gt; {&#10;  final $PAGE_NAME$Repository _repository;&#10;&#10;  $PAGE_NAME$Bloc({required $PAGE_NAME$Repository repository})&#10;      : _repository = repository,&#10;        super(const $PAGE_NAME$PageState.loading()) {&#10;    on&lt;PageLoad&gt;((event, emit) async {&#10;      _onPageLoad();&#10;    });&#10;  }&#10;  &#10;  _onPageLoad() {&#10;  //TODO: Implement&#10;  }&#10;&#10;}&#10;&#10;class $PAGE_NAME$ViewModel {&#10;}&#10;&#10;class $PAGE_NAME$Repository {&#10;  $PAGE_NAME$Repository(this.database);&#10;&#10;  final FirebaseDatabase database;&#10;&#10;  //Future&lt;List&lt;${DATA_MODEL_TYPE}&gt;&gt; fetch${DATA_MODEL_TYPE}({required String $ARG_1}) async {&#10;    //DataSnapshot snapshot = await database.ref(&quot;${DATA_MODEL_VAR}&quot;).get();&#10;    //Map&lt;String, dynamic&gt; json = jsonDecode(jsonEncode(snapshot.value));&#10;    //return json.entries.map((e) =&gt; ${DATA_MODEL_TYPE}.fromJson(e.value)).toList();&#10;  //}&#10;&#10;}" description="a new flutter page with bloc architecture" toReformat="false" toShortenFQNames="true">
    <variable name="PAGE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="pageState" value="import 'package:freezed_annotation/freezed_annotation.dart';&#10;&#10;part '$file_name$.freezed.dart';&#10;&#10;@freezed&#10;class $class_name$ with _$$$class_name$ {&#10;  const $class_name$._();&#10;  const factory $class_name$.initial($class_name$ViewModel viewModel ) = _Initial;&#10;  const factory $class_name$.loading() = _Loading;&#10;  const factory $class_name$.error(String message) = _Error;&#10;  &#10;}" description="freezed page state companion for bloc page" toReformat="false" toShortenFQNames="true">
    <variable name="file_name" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <variable name="class_name" expression="capitalize(underscoresToCamelCase(file_name))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="freezedJson" value="import 'package:freezed_annotation/freezed_annotation.dart';&#10;&#10;part '$file_name$.freezed.dart';&#10;part '$file_name$.g.dart';&#10;&#10;@freezed&#10;class $CLASS_NAME$ with _$$$CLASS_NAME$ {&#10;    const factory $CLASS_NAME$({&#10;        $END$&#10;    }) = _$CLASS_NAME$;&#10;    &#10;    factory $CLASS_NAME$.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$$$CLASS_NAME$FromJson(json);&#10;}" description="basic json freezed class" toReformat="false" toShortenFQNames="true">
    <variable name="file_name" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <variable name="CLASS_NAME" expression="capitalize(underscoresToCamelCase(file_name))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="mapPadding" value=".map((e) =&gt; Padding(padding: const EdgeInsets.all(8), child: e)).toList()&#10;" description="add padding to elements in a list" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="logd" value="log.d('$CLASS_NAME$: ${$END$}');" description="insert log statement" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="dartClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="analyticEvent" value="GetIt.I&lt;Analytics&gt;().log(AnalyticsEvent.$END$)" description="prepare to log an analytic event" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
</templateSet>